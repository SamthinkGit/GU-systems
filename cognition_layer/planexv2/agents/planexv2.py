import traceback
from dataclasses import dataclass
from typing import Generator

import ecm.exelent.parser as exelent_parser
from cognition_layer.planex.agents.planner import Planner
from cognition_layer.planex.agents.reducer import Reducer
from cognition_layer.planex.agents.translator import Translator
from cognition_layer.planex.utils.format import extract_python_code
from cognition_layer.planexv2.agents.blamer import BlameInfo
from cognition_layer.planexv2.agents.blamer import Blamer
from cognition_layer.planexv2.agents.blamer import ClassificationResponse
from ecm.exelent.verify import verify_valid_actions
from ecm.shared import get_logger


@dataclass
class PlanexV2Message:
    agent: str
    next_agent: str
    query: str
    content: str
    is_last: bool
    steps: int


class PlanexV2:

    _logger = get_logger("PlanexV2")

    def __init__(self) -> None:

        self.planner = Planner()
        self.reducer = Reducer()
        self.translator = Translator()
        self.blamer = Blamer()

    def iter(
        self,
        input: str,
        verbose: bool = False,
        max_steps: int = 10,
        _steps: int = 0,
        _planner_previous_output: str = None,
        _reducer_previous_output: str = None,
    ) -> Generator[PlanexV2Message, None, None]:

        if _steps > max_steps:
            raise RuntimeError("Maximum steps reached. Abort")

        original_query = input
        steps = _steps

        # Agent Steps
        if not _planner_previous_output:
            planner_output = self.planner.plan(input, verbose=verbose).content
            input = planner_output
            steps += 1
            yield PlanexV2Message(
                "planner",
                "reducer",
                original_query,
                planner_output,
                is_last=False,
                steps=steps,
            )
        else:
            planner_output = _planner_previous_output

        if not _reducer_previous_output:
            self.reducer.auto_bind_actions()
            reducer_output = self.reducer.reduce(input, verbose=verbose).content
            input = reducer_output
            steps += 1
            yield PlanexV2Message(
                "reducer",
                "translator",
                original_query,
                reducer_output,
                is_last=False,
                steps=steps,
            )
        else:
            reducer_output = _reducer_previous_output

        translator_output = self.translator.translate(input, verbose=verbose).content
        steps += 1
        task = None

        # Checking if Exelent file is correct
        try:
            if translator_output.startswith("```python"):
                translator_output = extract_python_code(translator_output)
            task = exelent_parser.parse(target_str=translator_output)
            verify_valid_actions(task)

        except Exception:
            self._logger.debug(
                "Task generated by Planex failed verification, calling to Blamer."
            )
            yield PlanexV2Message(
                "translator",
                "blamer",
                original_query,
                translator_output,
                is_last=False,
                steps=steps,
            )
            blame = BlameInfo(
                query=original_query,
                planner_output=planner_output,
                reducer_output=reducer_output,
                translator_output=translator_output,
                reducer_tools=self.reducer.actions,
                additional_info=traceback.format_exc(),
            )
            response: ClassificationResponse = self.blamer.run(blame, verbose=verbose)
            steps += 1
            yield PlanexV2Message(
                "blamer",
                response.blame,
                original_query,
                response.blame,
                is_last=False,
                steps=steps,
            )

            response.blame = response.blame.lower()
            if response.blame not in ["planner", "reducer", "translator"]:
                raise SystemError(
                    "Blamer could not find the error on the plan (Returned invalid Step), please revise the query."
                )
            _planner_previous_output = None
            _reducer_previous_output = None

            match response.blame:
                case "planner":
                    query = original_query
                case "reducer":
                    query = planner_output
                    _planner_previous_output = planner_output
                case "translator":
                    _planner_previous_output = planner_output
                    _reducer_previous_output = reducer_output
                    query = reducer_output

            yield from self.iter(
                input=query + "\nAdvise: " + response.advise,
                verbose=verbose,
                max_steps=max_steps,
                _steps=steps,
                _planner_previous_output=_planner_previous_output,
                _reducer_previous_output=_reducer_previous_output,
            )

        yield PlanexV2Message(
            "translator",
            None,
            original_query,
            translator_output,
            is_last=True,
            steps=steps,
        )
        return
